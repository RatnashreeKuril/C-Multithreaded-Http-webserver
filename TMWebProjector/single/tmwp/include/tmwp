#ifndef __TMWP__
#define __TMWP__ 134
#include<iostream>
#include<map>
#include<thread>
using namespace std;
namespace tmwp
{
class Response
{
private:
int clientSocketDescriptor;
bool isClosed;
bool headerCreated;
void createHeader();
public:
Response(int clientSocketDescriptor);
void write(const char *);
void write(string &);
void write(string);
// we need to overload more methods for primitive types
void close();
string get(const char *);
};

class Request
{
public:
char *method;
char *resource;
char *mimeType;
char isClientSideTechnologyResource;
map<string, string >keyValues;
int dataCount;
char **data;
string forwardTo;
void setKeyValue(string k, string v);
string getValue(string k);
string get(string name); // to extract data that has arrived in request
void forward(string forwardTo);
};
class TMWebProjector
{
private:
int portNumber;
map<string, void (*)(Request &, Response &)> requestMappings;
public:
TMWebProjector(int portNumber);
TMWebProjector(const TMWebProjector & tmWebProjector);
~TMWebProjector();
void start();
void onRequest(string url,void (*ptrOnRequest)(Request &, Response &));
void operator()(int clientSocketDescriptor);
void close();
};

}
#endif